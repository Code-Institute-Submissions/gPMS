
#+OPTIONS: ^:nil
#+TITLE: The Goanna Patient Management System:
#+TITLE: Application Architecture
#+AUTHOR: James Ferguson 

* Introduction

The Goanna patient management system (gPMS) is an open source patient management system 
designed for small clinics.

This is a planning document to outline the architecture of the application, including front-end layout
and back-end structure django apps, database models, classes and functions that will be needed.

gPMS has two primary users in mind.

1. Clinic owners who register themselves are practitioners and list their clinics details. Ideally the system
would provide methods for these users to make appointment times available to be booked by patients.

2. Patients/Clients that are looking for a specific modality, or are trying to make an appointment with their
regular practitioner. Ideally they would be provided with a location specific listing of clinics in their area.

Clinic owners, as paying customers of the service will be refered to internally as customers, while regular
users of the site will be refered to as patients.

* Front-end 

** Home

when first encountering the site, a prospective user will find themselves at a landing page that describes the
service, it's main features and offers a sign up form. This is the registration form

The initial form is just to create the users authentication ie, email and password and when completed, is
replaced with a more detailed form in which the patient provides their name, phone number and other personal
details and identifies whether they are signing up as a patient or a practitioner. This is the personal
information form. 

If the user identifies themselves as a practitioner, they will be provided a third form where they can register
their clinic. This is the clinic form

** Patients

Once registerd and logged in, a patient will automatically be directed to a page with a google map that shows
any clinics in the area. They are also presented with a search field where they can search for a modality
or a clinic or practitioner by name. Clinics can be added as favourites so patients can get quick access to 
clinics they have visited in the past.

** Practitioners 

After registering their clinic, a practitioner will automatically be directed to their calendar view. This is
where they can manage available times, change or add services provided, clinic opening hours, and access a log
of appointments that is updated as appointments are created or deleted.

Practitions also have access to a patient directory. This is compiled from the information given by the patient
when they complete the personal information form. Once a patient confirms a booking, their personal information
becomes available in the practitioners patient directory.

* Middleware

** Django applications

*** django_auth  
    This app is responsible for creation and authentication of users. It contains a custom user model that
    inherits from AbstractBaseUser as well as a custom user manager that inherits from BaseUserManager.
    
**** class CustomUserManager
     Provides methods to manage user creation both in the admin panel and on the command line with 
     createsuperuser

***** Class Methods     
      
         create_user(self, email, password=None, is_active=True,
                    is_practitioner=False, is_admin=False, is_staff=False):
         - Creates a user from the from the model defined in the class CustomUser. 

         create_practitioner(self, email, password=None):
         - Creates a user with the boolean is_practitioner set to True.

         create_superuser(self, email, password=None):
         - Called by createsuperuser command line tool.

**** cass CustomUser
     Defines the custom user model used for authentication. The model is intentionally sparse, leaving 
     most user information to be handled by accounts models.

***** Class Methods
      
         __str__(self):

         - Returns the users email address

         get_full_name(self):

         - Returns the users full name

         get_short_name(self):

         - Returns the users first name

         has_perm(self, perm, obj=None):

         - Returns True if the user has the specified permission, where perm is in the format "<app label>.
         <permission codename>". (see documentation on permissions). If the user is inactive, this method 
         will always return False. For an active superuser, this method will always return True.
         If obj is passed in, this method wonâ€™t check for a permission for the model, but for this specific 
         object.
         
         has_module_perms(self, app_label):
         
         - Returns True if the user has any permissions in the given package (the Django app label).
         If the user is inactive, this method will always return False. For an active superuser, this 
         method will always return True.
     
*** accounts
    This app is responsible for taking data from the personal information forms and contains models with relation
    field to the Auth models and clinic models

*** Clinics
    This app is responsible for clinic management, including avalabile modalites, opening times, location,
    clinic contact details. This information is initially provided by the clinic registration form. It includes
    models containing relevant clinic information and has relationships with both CustomUser and Profile models.
    Clinic is also responsible for providing a public listing of registered clinics with a profile on their practitioner.

*** Contacts
    This is an app that handles patient contact information. It allows the practitioner to update a patients
    details, add private notes, red flags etc.

*** Scheduler
    This is the calendaring app that gives a practitioner an overview of their schedule and allows them to
    manage their available times, mark appointment blocks as unavailable and create and delete appointments.
    It contains it's own models with relationships to accounts and clinics.

*** Log
    This is a log of appointments with timestamps tagged with the name of the user that created them.
    
*** Welcome
    This app is responsible for providing the landing page and sign up forms.

* Back-end

** Models
